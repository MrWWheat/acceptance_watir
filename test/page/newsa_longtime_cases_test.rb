require 'watir_test'
require 'pages/newsa/login'
require 'pages/newsa/communities'
require 'pages/newsa/mail_catcher'
require 'pages/newsa/details_view'
require 'pages/community/home'
require 'pages/community/login'

class NewSALongTimeCasesTest < WatirTest

  def setup
    super

    @login_page = Pages::NewSuperAdmin::Login.new(@config)
    @communities_page = Pages::NewSuperAdmin::Communities.new(@config)
    @commview_page = Pages::NewSuperAdmin::DetailsView.new(@config)
    @mail_catcher = Pages::MailCatcher::SAMailCatcher.new(@config)

    @test_date = Time.now.strftime("%y%m%d")
    @test_time = Time.now.strftime("%y%m%d%H%M%S")
    @testcomm_name = "ProdSASCWatirTest Community"
    @testcomm_customerid = "Id for Watir Test"
    @testcomm_subdomain = "watirtest-prodsasc"
    @testcomm_admin_email = "watirprodscadmin#{@test_time}@watir.com"
    @testcomm_admin_name = "watiradmin"
    @testcomm_admin_pwd = "P@ssw0rd"

    @testtemplate_name = @config.comm_template_name
    @testtemplate_domain = @config.comm_template_domain
    @testtemplate_commdomain = @config.comm_template_domain.gsub(/https:\/\/template-/, "https://")
    @testtemplate_commsubdomain = @config.comm_template_subdomain  

    # assigning @current_page helps error reporting
    #  give good contextual data
    @current_page = @login_page
    puts "[[[ #{name} ::: #{user_for_test} ]]]" if @config.verbose?
    @browser = @config.browser

    if user_for_test == :anonymous
      @login_page.start!(user_for_test)
    else
      @communities_page.start!(user_for_test)
    end  
  end

  def teardown
    super
  end

  user :sa_prod_pv
  p1
  def test_00010_prod_create_community_with_scheduled_admin
    unless @communities_page.find_community(:prod, @testcomm_name).nil?
      @communities_page.delete_community(:prod, @testcomm_name)
    end

    schedule_time = Time.now + 5*60
    field_infos = { name: @testcomm_name, customerid: @testcomm_customerid, domain: @testcomm_subdomain }
    comm_view_page = @communities_page.create_community(:prod, field_infos, @testcomm_admin_email, schedule_time.strftime("%Y-%m-%d %H:%M:%S"))
    assert comm_view_page.community_admin.invitation_sent == schedule_time.strftime("%Y-%m-%d %H:%M:%S") + " (Scheduled)"

    @browser.goto @config.mail_catcher_url
    timeout = schedule_time - Time.now + 30*60 
    mail_urls = @mail_catcher.get_admin_invite_emails(@testcomm_admin_email, 2, timeout)
    assert mail_urls.size == 2
    invite_email_page = @mail_catcher.goto_admin_invite_email(mail_urls[0])

    registerfield_infos = { username: @testcomm_admin_name, 
                            firstname: "Admin", 
                            lastname: "Watir", 
                            companyname: "SAP", 
                            newpwd: @testcomm_admin_pwd }

    invite_email_page.sign_in(registerfield_infos) do |login_page|
      @browser.wait_until { login_page.username_field.present? }
      assert login_page.preview_span.present?
    end  

    user = WatirConfig::User.new(nil, @testcomm_admin_email, @testcomm_admin_pwd, @testcomm_admin_name, "", "", nil)
    logout_then_login_community(user)

    invite_email_page = @mail_catcher.goto_admin_invite_email(mail_urls[1])
    invite_email_page.sign_in registerfield_infos
    logout_then_login_community(user)
  end 

  user :sa_demo_sale
  p1
  def test_00020_demo_copy_community_from_template_with_much_data
    # delete the dirty community which generated by the case failed before
    unless @communities_page.find_community(:demo, @testtemplate_name, @testtemplate_commdomain, false, true).nil?
      @communities_page.delete_community(:demo, @testtemplate_name, @testtemplate_commdomain, true)
    end
      
    # delete the specific community if exists
    unless @communities_page.find_community(:demo, @testtemplate_name, @testtemplate_commdomain).nil?
      @communities_page.delete_community(:demo, @testtemplate_name, @testtemplate_commdomain)
    end

    @communities_page.copy_to_community(@testtemplate_name, @testtemplate_domain, @testtemplate_name, @testtemplate_commsubdomain)
    assert !@communities_page.find_community(:demo, @testtemplate_name, @testtemplate_commdomain).nil?, "Cannot find the cloned community #{@testtemplate_name}"
  end 

  def logout_then_login_community(user)
    home_page = Pages::Community::Home.new(@config)
    @browser.wait_until { home_page.homebanner.present? || @browser.div(:css => ".my-auto-show-modal").present? }
    @browser.wait_until { !home_page.layout_loading_block.present? }
    if @browser.div(:css => ".my-auto-show-modal").present?
      @browser.button(:css => ".my-auto-show-modal button.btn-primary").when_present.click
      @browser.wait_until { !@browser.div(:css => ".my-auto-show-modal").present? }
    end  
    # add the following 3 sleep to fix 422 Unprocess Error issue
    sleep 1
    home_page.logout!
    sleep 1
    home_page.login_link.when_present.click
    sleep 1
    login_page = Pages::Community::Login.new(@config)
    login_page.login_with_username_and_password(user)
    @browser.wait_until { home_page.user_dropdown.present? }
    @browser.wait_until { !home_page.layout_loading_block.present? }
    home_page.logout!
  end  
end  